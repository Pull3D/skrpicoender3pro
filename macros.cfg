[gcode_shell_command backup_to_github]
command: sh /home/pi/backup/backup.sh
timeout: 30.
verbose: True

[gcode_macro GITHUB_BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github


# =========================
# Print Macros
# =========================

[include bed_mesh.cfg]

[gcode_macro PURGE_LINE]
gcode:
    G90                         ; set absolute mode

    G1 Z2.0 F3000               ; move Z=2 to prevent scratching

    G1 X5 Y1 F12000             ; Move to initial position
    G1 Z0.28 F500               ; lower to start of intro line
    M83                         ; set extruder to relative

    G1 X100 E10.0 F2500.0         ; to the right, to the right
    G1 Y1.3 F6000               ; move .3mm forward
    G1 X5 E12.0 F2000.0          ; to the left, to the left

    G1 Z2.0 F3000               ; move Z=2 again to prevent scratching


#################################################
##            START PRINT MACRO                ##
#################################################
[gcode_macro START_PRINT]
gcode:
    TURN_ON_LEDS
    M117 Homing
    G90
    G28
    G90
    M117 Nivelar mesa
    TURN_ON_LEDS RED=0 BLUE=0
    #BED_MESH_CALIBRATE      # ativar caso usem nivelamento automatico
    G1 X2 Y50 Z10 F1500.0
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    M117 Espera temperaturas
    TURN_ON_LEDS GREEN=0 RED=0.5 BLUE=0.5
    M140 S{BED_TEMP}
    {% if printer.heater_bed.temperature > params.BED_TEMP|float*0 %}
        M140 S{BED_TEMP}
        M109 S{EXTRUDER_TEMP}
        M190 S{BED_TEMP}
    {% else %}
        M190 S{params.BED_TEMP|float*0}
        M109 S{EXTRUDER_TEMP}
        M190 S{BED_TEMP}
    {% endif %}
    TURN_ON_LEDS #RED=0 BLUE=0
    PRIME_LINE
    M117 A Imprimir...

#######PRIME LINE####################

[gcode_macro PRIME_LINE]
gcode:
    G92 E3
    M117 Linha de purga
    G92 E0
    G1 Z2.0 F3000
    G1 X1 Y30 Z0.2 F5000.0
    G1 X1 Y200.0 Z0.2 F1500.0 E15
    G1 X2 Y200.0 Z0.2 F5000.0
    G1 X2 Y50 Z0.2 F1500.0 E30
    G92 E0
    G1 Z5.0 F3000

###### START PRINT MULTILAYER #####
[gcode_macro START_PRINT_MULTILAYER]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    M117 Espera temperaturas
    M140 S{BED_TEMP}
    {% if printer.heater_bed.temperature > params.BED_TEMP|float*0 %}
        M140 S{BED_TEMP}
        M109 S{EXTRUDER_TEMP}
        M190 S{BED_TEMP}
    {% else %}
        M190 S{params.BED_TEMP|float*0}
        M109 S{EXTRUDER_TEMP}
        M190 S{BED_TEMP}
    {% endif %}
    G92 E0
    PRIME_LINE
    M117 Imprimir multi camada...
####################################



[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(0) %}      #edit to your park position
    {% set z = params.Z|default(20)|float %} #edit to your park position
    {% set e = params.E|default(0) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(0) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

#################################################
##              END PRINT MACRO                ##
#################################################
[gcode_macro END_PRINT]
gcode:
    M117 Impressao finalizada...
    G91
    G1 E-3 F3000
    G90
    G1 X10 Y200 F2000
    M104 S0
    M140 S0
    M106 S0
    M84 X Y E
    BED_MESH_CLEAR
    TURN_ON_LEDS RED=0 BLUE=0

#### END PRINT MULTILAYER ####

[gcode_macro END_PRINT_MULTILAYER]
gcode:
    M117 Trocar Filamento
    G1 X10 Y200 Z30 F2000
    G92 E0
    TURN_ON_LEDS RED=0 BLUE=0

# =========================
# Filament Macros
# =========================

[gcode_macro LOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E25.0 F1000 # Push some filament out
  G1 E40 F2000 # Push alot more filament out quickly
  G4 P900 # Wait 0.9 seconds
  G1 E50.0 F250 # Extrude some more out slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
  G91 # Use relative coordinates
  G1 E5.0 F1200 # Push some filament out
  G1 E3.0 F1600 # Push a bit more filament out, faster
  G1 E-10 F2500 # Retract quickly
  G1 E-60 F2000 # Fully retract the rest out
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro PURGE]
gcode:
  G91 # Use relative coordinates
  G1 E50.0 F250 # Extrude slowly
  G90 # Use absolute coordinates
  {% if printer["gcode_macro DISABLE_MOTORS_CHECK"].disable_motors == 1 %}
    M84 # Disable motors
  {% endif %}

[gcode_macro M600]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=72000
  SET_ENABLE_MOTORS
  PAUSE
  UNLOAD_FILAMENT

# =========================
# Movement Macros
# ========================= 

[gcode_macro MOVE_X]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_x DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Y]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_y DISTANCE={custom_distance} VELOCITY=50
  M84 # Disable motors

[gcode_macro MOVE_Z]
gcode:
  {% set custom_distance = params.CUSTOM_DISTANCE|default(10)|int %}
  FORCE_MOVE STEPPER=stepper_z DISTANCE={custom_distance} VELOCITY=10
  M84 # Disable motors

[gcode_macro G29]
gcode:
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default

[gcode_macro CG28]
gcode:
  {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro DISABLE_MOTORS_CHECK]
variable_disable_motors: 1
gcode:
  M118 {disable_motors}

[gcode_macro SET_ENABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=0

[gcode_macro SET_DISABLE_MOTORS]
gcode:
  SET_GCODE_VARIABLE MACRO=DISABLE_MOTORS_CHECK VARIABLE=disable_motors VALUE=1

# =========================
# Misc. Macros
# ========================= 
[gcode_macro SCREW_TILT_CALCULATE]
gcode:
  SCREWS_TILT_CALCULATE

#[gcode_shell_command backup_cfg]
#command: sh /home/pi/klipper_config/autocommit.sh
#timeout: 30.
#verbose: True

[gcode_macro FIRMWARE_RESTART]
rename_existing: STOCK_FIRMWARE_RESTART
gcode:
  BACKUP_CFG
  STOCK_FIRMWARE_RESTART

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
	
#####################################################################
#	   LEDs
#####################################################################

[gcode_macro TURN_ON_LEDS]
description: Turn on LED ligths
gcode:
    {% set R = params.RED|default(1.0)|float %}
    {% set G = params.GREEN|default(1.0)|float %}
    {% set B = params.BLUE|default(1.0)|float %}
    SET_LED LED=lights RED={R} GREEN={G} BLUE={B}

[gcode_macro TURN_OFF_LEDS]
description: Turn off LED ligths
gcode:
    SET_LED LED=lights RED=0.0 GREEN=0.0 BLUE=0.0